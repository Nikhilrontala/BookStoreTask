@model BookStore.Areas.Books.Data.mBooks

    <div class="row">
        <div class="col-xl-12 col-lg-12 col-sm-12  layout-spacing">
            <div class="statbox widget box box-shadow">
                <div class="widget-header">
                    @Html.HiddenFor(model => model.BookId)
                    <div class="row">
                        <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                            <div class="input-group input-group-sm mb-4">
                                <div class="input-group-prepend">
                                    <span class="form-control-rounded-left input-group-text" id="inputGroup-sizing-sm">Book Code</span>
                                </div>
                                <input type="text" id="bookCode" value="@Model.BookCode" class="form-control-rounded-right form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                            <div class="input-group input-group-sm mb-4">
                                <div class="input-group-prepend">
                                    <span class="form-control-rounded-left input-group-text" id="inputGroup-sizing-sm">Book Name</span>
                                </div>
                                <input type="text" id="BookName" value="@Model.BookName" class="form-control-rounded-right form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                            <div class="input-group input-group-sm mb-4">
                                <div class="input-group-prepend">
                                    <span class="form-control-rounded-left input-group-text" id="inputGroup-sizing-sm">Author</span>
                                </div>
                                <input type="text" id="BookAuthor" value="@Model.BookAuthor" class="form-control-rounded-right form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                            <div class="input-group input-group-sm mb-4">
                                <div class="input-group-prepend">
                                    <span class="form-control-rounded-left input-group-text" id="inputGroup-sizing-sm">Availablity</span>
                                </div>
                                <select class="form-control basic" id="BookIsAvail">
                                    @if (Model.BookIsAvail == "Available")
                                    {
                                        <option selected="selected">Available</option>
                                        <option>Out Of Stock</option>
                                    }
                                    else
                                    {
                                        <option >Available</option>
                                        <option selected="selected">Out Of Stock</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                            <div class="input-group input-group-sm mb-4">
                                <div class="input-group-prepend">
                                    <span class="form-control-rounded-left input-group-text" id="inputGroup-sizing-sm">Book Price</span>
                                </div>
                                <input type="text" id="BookPrice"  value="@Model.BookPrice" class="form-control-rounded-right form-control" aria-label="Small" aria-describedby="inputGroup-sizing-sm">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-12 col-md-12 col-sm-12 col-12">
                            <div class="input-group input-group-sm mb-4">
                                <div class="input-group-prepend">
                                    <span class="form-control-rounded-left input-group-text" id="inputGroup-sizing-sm">Self Code</span>
                                </div>
                                <select class="form-control basic" id="selfId">
                                    <option selected="selected" value="">Select Shelf</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-12 col-md-12 col-sm-12 col-12 d-flex justify-content-center">
                            <button type="button" class="btn btn-primary" id="UpdateBooks"> <i class="flaticon-plus-2"></i> Update </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

<script>
    $(function () {
        getActiveShelves();
        validate();
       // const inputElement = $("#BookPrice");
        //inputElement.on("input", function () {
        //    const inputValue = inputElement.val();
        //    const sanitizedValue = inputValue.replace(/[^\d.]/g, "");
        //    const formattedValue = parseFloat(sanitizedValue).toFixed(2);
        //    inputElement.val(formattedValue);
        //});
    });


    var validate = function () {
            $("#Add_books").validate({
                focusInvalid: true,
                rules: {
                    bookCode: {
                        required: true
                    },
                    BookName: {
                        required: true
                    },
                    BookAuthor: {
                        required: true
                    },
                    BookIsAvail: {
                        required: true
                    },
                    BookPrice: {
                        required: true,
                        pattern: /^\d+(\.\d{1,2})?$/
                    },
                    selfId: {
                        required: true
                    }
                },
                messages: {
                    bookCode: {
                        required: "Please enter Book Code"
                    },
                    BookName: {
                        required: "Please enter Book Name"
                    },
                    BookAuthor: {
                        required: "Please enter Book Author"
                    },
                    BookIsAvail: {
                        required: "Please Select Book Is Available"
                    },
                    BookPrice: {
                        required: "Please enter Book Price",
                        required: "Please enter numerals"
                    },
                    selfId: {
                        required: "Please Select Shelf"
                    }
                },
                highlight: function (element) {
                    $(element).closest('.form-group').addClass('text-danger');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('text-danger');
                },
                errorElement: 'span',
                errorClass: 'text-danger fw-bold',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else {
                        error.insertAfter(element);
                    }
                }
            });
        }

    function getActiveShelves() {
    $.ajax({
        url: '@Url.Action("GetActiveShelves")',
        type: 'GET',
        dataType: 'json',
        success: function (data) {
            console.log(data);
            var selectElement = $('#selfId');
            selectElement.empty();
            $.each(data, function (index, shelf) {
                var option = $('<option></option>');
                option.val(shelf.selfId);
                option.text(shelf.selfCode);
                selectElement.append(option);
            });
            selectElement.val('@Model.BookselfId');
        },
        error: function (xhr) {
            console.log(xhr);
        }
    });
}

    $('#UpdateBooks').click(function () {
       
                var _updateinsertdata = {
                    BookCode: $("#bookCode").val(),
                    BookName: $("#BookName").val(),
                    BookAuthor: $("#BookAuthor").val(),
                    BookIsAvail: $("#BookIsAvail").val(),
                    BookPrice: $("#BookPrice").val(),
                    BookselfId: $("#selfId").val(),
                    BookId: $("#BookId").val()
                };
                console.log(_updateinsertdata);
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("UpdateBook")",
                    contentType: "application/json",
                    data: JSON.stringify(_updateinsertdata), // Convert the data to JSON string
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        alert(response.message);
                        if (response.rowsAffected != -1) {
                            getAllBooks();
                            $("#bookModal").modal("hide");
                        }
                    },
                    error: function (xhr) {
                        console.log("Error: " + xhr.statusText);
                    }
                });
});
</script>
